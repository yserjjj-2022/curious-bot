# -*- coding: utf-8 -*-

import os
import sys
import logging
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CallbackQueryHandler

from services.storage_service import StorageService

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
load_dotenv()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WORKFLOW_CHANNEL_ID = os.getenv("WORKFLOW_CHANNEL_ID")
PUBLISH_CHANNEL_ID = os.getenv("PUBLISH_CHANNEL_ID")

if not all([TELEGRAM_BOT_TOKEN, WORKFLOW_CHANNEL_ID, PUBLISH_CHANNEL_ID]):
    logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")
    sys.exit(1)

storage = StorageService()

# --- –ö–æ–Ω–≤–µ–π–µ—Ä—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def triage_conveyor_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ó–∞–ø—É—â–µ–Ω –∫–æ–Ω–≤–µ–π–µ—Ä –û–¢–°–ï–í–ê...")
    articles = storage.get_articles_by_status('investigated', limit=5)
    if not articles: return
    for article in articles:
        message_text = (f"<b>[–ù–ê –û–¢–°–ï–í]</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {article.title}\n"
                        f"<b>DOI:</b> {article.doi}\n<b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> <code>{article.content_type}</code>")
        keyboard = [[
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"triage_accept_{article.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"triage_reject_{article.id}"),
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            sent_message = await context.bot.send_message(
                chat_id=WORKFLOW_CHANNEL_ID, text=message_text, parse_mode='HTML',
                reply_markup=reply_markup, disable_web_page_preview=True
            )
            storage.update_moderation_message_id(article.id, sent_message.message_id)
            storage.update_article_status(article.id, 'awaiting_triage')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Ç—Å–µ–≤: {e}", exc_info=True)

async def review_conveyor_job(context: ContextTypes.DEFAULT_TYPE):
    logger.info("–ó–∞–ø—É—â–µ–Ω –∫–æ–Ω–≤–µ–π–µ—Ä –£–¢–í–ï–†–ñ–î–ï–ù–ò–Ø...")
    articles = storage.get_articles_by_status('awaiting_review', limit=5)
    if not articles: return
    for article in articles:
        if not article.moderation_message_id:
            logger.warning(f"–£ —Å—Ç–∞—Ç—å–∏ {article.id} –Ω–µ—Ç message_id, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            continue
        message_text = (f"<b>[–ù–ê –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï]</b>\n\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {article.title}\n\n"
                        f"<b>–°–∞–º–º–∞—Ä–∏:</b>\n{article.summary}\n\n<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {article.doi}")
        keyboard = [[
            InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_approve_{article.id}"),
            InlineKeyboardButton("üóëÔ∏è –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"publish_reject_{article.id}"),
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await context.bot.edit_message_text(
                chat_id=WORKFLOW_CHANNEL_ID, message_id=article.moderation_message_id,
                text=message_text, parse_mode='HTML', reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            storage.update_article_status(article.id, 'awaiting_publication')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {e}", exc_info=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) ---
async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split('_')
        prefix, action, article_id = parts[0], parts[1], "_".join(parts[2:])

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç text_html ---
        original_message_html = query.message.text_html

        def get_title_from_message(message_html: str) -> str:
            lines = message_html.split('\n')
            for line in lines:
                if "<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b>" in line:
                    return line.strip()
            return "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        if prefix == "triage":
            if action == "accept":
                article = storage.get_article_by_id(article_id)
                next_status = 'awaiting_parsing' if article.content_type == 'pdf' else 'awaiting_abstract_summary'
                storage.update_article_status(article.id, next_status)
                await query.edit_message_text(text=f"‚úÖ <b>–ü–†–ò–ù–Ø–¢–û.</b>\n–°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø: `{next_status}`\n\n{original_message_html}", parse_mode='HTML', reply_markup=None)
            elif action == "reject":
                storage.update_article_status(article_id, 'triage_rejected')
                article_title = get_title_from_message(original_message_html)
                await query.edit_message_text(text=f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û.</b>\n{article_title}", parse_mode='HTML', reply_markup=None)
                
        elif prefix == "publish":
            if action == "approve":
                article = storage.get_article_by_id(article_id)
                final_post = (f"<b>{article.title}</b>\n\n{article.summary}\n\n<a href='{article.doi}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>")
                await context.bot.send_message(
                    chat_id=PUBLISH_CHANNEL_ID, text=final_post, parse_mode='HTML',
                    disable_web_page_preview=False
                )
                storage.update_article_status(article_id, 'published')
                await query.edit_message_text(text=f"üöÄ <b>–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û</b>\n\n{original_message_html}", parse_mode='HTML', reply_markup=None)
                logger.info(f"–°—Ç–∞—Ç—å—è {article.id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.")
            elif action == "reject":
                storage.update_article_status(article_id, 'review_rejected')
                article_title = get_title_from_message(original_message_html)
                await query.edit_message_text(text=f"üóëÔ∏è <b>–û–¢–ü–†–ê–í–õ–ï–ù–û –í –ö–û–†–ó–ò–ù–£.</b>\n{article_title}", parse_mode='HTML', reply_markup=None)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}", exc_info=True)


def main():
    logger.info("–ó–∞–ø—É—Å–∫ –ê–≥–µ–Ω—Ç–∞-–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–†–µ–¥–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –ø—É–ª—å—Ç)...")
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    job_queue = application.job_queue
    job_queue.run_repeating(triage_conveyor_job, interval=60, first=10)
    job_queue.run_repeating(review_conveyor_job, interval=75, first=20)
    
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    
    application.run_polling()

if __name__ == '__main__':
    main()
