# -*- coding: utf-8 -*-

import os
import sys
import logging
import re
from pathlib import Path

# --- –ü–£–õ–ï–ù–ï–ü–†–û–ë–ò–í–ê–ï–ú–´–ô –ë–õ–û–ö –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò ---
script_dir = Path(__file__).resolve().parent
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≥–¥–µ –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç
project_root = script_dir if script_dir.name == 'curious-bot' else script_dir.parent
sys.path.insert(0, str(project_root))
from dotenv import load_dotenv
dotenv_path = project_root / '.env'
load_dotenv(dotenv_path=dotenv_path)

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ApplicationBuilder, ContextTypes, CallbackQueryHandler, CommandHandler
from services.storage_service import StorageService

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger("TelegramBot")

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WORKFLOW_CHANNEL_ID = os.getenv("WORKFLOW_CHANNEL_ID")
PUBLISH_CHANNEL_ID = os.getenv("PUBLISH_CHANNEL_ID")
MODERATION_BATCH_SIZE = int(os.getenv("MODERATION_BATCH_SIZE", 10))

storage = StorageService()

# --- –ö–û–ù–í–ï–ô–ï–†–´ (–¢–†–ò–ì–ì–ï–†–´) ---

async def trigger_triage_conveyor(app: Application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ –Ω–∞ –û–¢–°–ï–í –≤ –†–ê–ë–û–ß–ò–ô –∫–∞–Ω–∞–ª."""
    logger.info("–ó–∞–ø—É—â–µ–Ω –∫–æ–Ω–≤–µ–π–µ—Ä –û–¢–°–ï–í–ê –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É...")
    articles = storage.get_articles_by_status('investigated', limit=MODERATION_BATCH_SIZE, random_order=True)
    if not articles:
        logger.info("...—Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Ç—Å–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(articles)} —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Ç—Å–µ–≤...")
    for article in articles:
        message_text = (
            f"<b>[–ù–ê –û–¢–°–ï–í]</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {article.title}\n"
            f"<b>DOI:</b> {article.doi}\n"
            f"<b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> <code>{article.content_type}</code>"
        )
        keyboard = [[
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"triage_accept_{article.id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"triage_reject_{article.id}"),
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            sent_message = await app.bot.send_message(
                chat_id=WORKFLOW_CHANNEL_ID, 
                text=message_text, 
                parse_mode='HTML',
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            storage.update_moderation_message_id(article.id, sent_message.message_id)
            storage.update_article_status(article.id, 'awaiting_triage')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Ç—Å–µ–≤ {article.id}: {e}", exc_info=True)

async def trigger_review_conveyor(app: Application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—å–∏ –Ω–∞ –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï –≤ –†–ê–ë–û–ß–ò–ô –∫–∞–Ω–∞–ª."""
    logger.info("–ó–∞–ø—É—â–µ–Ω –∫–æ–Ω–≤–µ–π–µ—Ä –£–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ø–æ —Ç—Ä–∏–≥–≥–µ—Ä—É...")
    articles = storage.get_articles_by_status('awaiting_review', limit=MODERATION_BATCH_SIZE, random_order=True)
    if not articles:
        logger.info("...—Å—Ç–∞—Ç–µ–π –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(articles)} —Å—Ç–∞—Ç–µ–π –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
    for article in articles:
        if not article.moderation_message_id:
            logger.warning(f"–£ —Å—Ç–∞—Ç—å–∏ {article.id} –Ω–µ—Ç moderation_message_id, –ø—Ä–æ–ø—É—Å–∫–∞—é.")
            continue
        
        theme_line = f"<b>–¢–µ–º–∞:</b> {article.theme_name}\n\n" if article.theme_name else ""
        message_text = (
            f"<b>[–ù–ê –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï]</b>\n\n"
            f"{theme_line}"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {article.title}\n\n"
            f"<b>–°–∞–º–º–∞—Ä–∏:</b>\n{article.summary}\n\n"
            f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {article.doi}"
        )
        keyboard = [[
            InlineKeyboardButton("üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_approve_{article.id}"),
            InlineKeyboardButton("üóëÔ∏è –í –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"publish_reject_{article.id}"),
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            await app.bot.edit_message_text(
                chat_id=WORKFLOW_CHANNEL_ID, message_id=article.moderation_message_id,
                text=message_text, parse_mode='HTML', reply_markup=reply_markup,
                disable_web_page_preview=True
            )
            storage.update_article_status(article.id, 'awaiting_publication')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {article.id}: {e}", exc_info=True)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = "–ü—Ä–∏–≤–µ—Ç, –†–µ–¥–∞–∫—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [[
        InlineKeyboardButton("‚úÖ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞ –û–¢–°–ï–í", callback_data="manual_triage"),
        InlineKeyboardButton("üöÄ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞ –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï", callback_data="manual_review"),
    ],[
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ–π–µ—Ä–æ–≤", callback_data="show_pipeline_status"),
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=welcome_message, reply_markup=reply_markup)

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data
        if data == "manual_triage":
            await trigger_triage_conveyor(context.application)
            await query.edit_message_text(text="‚úÖ –ó–∞–ø—Ä–æ—à–µ–Ω—ã —Å—Ç–∞—Ç—å–∏ –Ω–∞ –û–¢–°–ï–í. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—á–∏–π –∫–∞–Ω–∞–ª.")
        elif data == "manual_review":
            await trigger_review_conveyor(context.application)
            await query.edit_message_text(text="üöÄ –ó–∞–ø—Ä–æ—à–µ–Ω—ã —Å—Ç–∞—Ç—å–∏ –Ω–∞ –£–¢–í–ï–†–ñ–î–ï–ù–ò–ï. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—á–∏–π –∫–∞–Ω–∞–ª.")
        elif data == "show_pipeline_status":
            status_message = "üìä *–°–¢–ê–¢–£–° –ö–û–ù–í–ï–ô–ï–†–û–í*\n\n"
            all_statuses = ['new', 'investigated', 'awaiting_triage', 'triage_rejected',
                            'awaiting_parsing', 'awaiting_abstract_summary', 'extraction_failed',
                            'awaiting_review', 'awaiting_publication', 'review_rejected', 'published']
            for status in all_statuses:
                count = storage.get_article_count_by_status(status)
                status_message += f"‚Ä¢ `{status}`: {count} —Å—Ç–∞—Ç–µ–π\n"
            await query.edit_message_text(text=status_message, parse_mode='Markdown')
        else:
            parts = data.split('_')
            prefix, action, article_id = parts[0], parts[1], "_".join(parts[2:])

            if prefix == "triage":
                if action == "accept":
                    article = storage.get_article_by_id(article_id)
                    if not article: return
                    next_status = 'awaiting_parsing' if article.content_type == 'pdf' else 'awaiting_abstract_summary'
                    storage.update_article_status(article.id, next_status)
                    await query.edit_message_text(text=f"‚úÖ <b>–ü–†–ò–ù–Ø–¢–û.</b>\n–°—Ç–∞—Ç—å—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —ç—Ç–∞–ø: `{next_status}`", parse_mode='HTML')
                elif action == "reject":
                    storage.update_article_status(article_id, 'triage_rejected')
                    await query.edit_message_text(text="‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û.</b>", parse_mode='HTML')
                    
            elif prefix == "publish":
                article = storage.get_article_by_id(article_id)
                if not article: return
                if action == "approve":
                    hashtag = f"#{re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø_]', '', article.theme_name.replace(' ', '_'))}" if article.theme_name else ""
                    final_post = (f"{hashtag}\n\n" if hashtag else "") + \
                                 f"<b>{article.title}</b>\n\n" + \
                                 f"{article.summary}\n\n" + \
                                 f"<a href='{article.doi}'>–ò—Å—Ç–æ—á–Ω–∏–∫</a>"
                    await context.bot.send_message(chat_id=PUBLISH_CHANNEL_ID, text=final_post, parse_mode='HTML', disable_web_page_preview=False)
                    storage.update_article_status(article.id, 'published')
                    await query.edit_message_text(text=f"üöÄ <b>–û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û</b>", parse_mode='HTML')
                elif action == "reject":
                    storage.update_article_status(article_id, 'review_rejected')
                    await query.edit_message_text(text="üóëÔ∏è <b>–û–¢–ü–†–ê–í–õ–ï–ù–û –í –ö–û–†–ó–ò–ù–£.</b>", parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–æ–∫: {e}", exc_info=True)

# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---
def run_telegram_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler(["start", "menu"], start_command))
    application.add_handler(CallbackQueryHandler(button_callback_handler))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    application.run_polling()

if __name__ == '__main__':
    run_telegram_bot()
